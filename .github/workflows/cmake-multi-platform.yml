# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      grpc-version:
        description: 'Version of GRPC lib'
        required: false
        type: string
        default: 'v1.60.0'
      onnx-version:
        description: 'Version of ONNX Runtime lib'
        required: false
        type: string
        default: '1.16.3'

jobs:
  build:
    env:
      GRPC_VERSION: ${{ inputs.grpc-version != '' && inputs.grpc-version || 'v1.60.0' }}
      GRPC_INSTALL_DIR: ${{ github.workspace }}/.grpc
      ONNX_VERSION: ${{ inputs.onnx-version != '' && inputs.onnx-version || '1.16.3' }}
      ONNX_INSTALL_DIR: ${{ github.workspace }}/.onnx

    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Cache gRPC
      id: cache-grpc
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.GRPC_INSTALL_DIR }}
        key: ${{ runner.os }}-grpc-${{ env.GRPC_VERSION }}
        restore-keys: |
          ${{ runner.os }}-grpc-${{ env.GRPC_VERSION }}
          ${{ runner.os }}-grpc-

    - if: ${{ steps.cache-grpc.outputs.cache-hit != 'true' }}
      name: Build gRPC
      run: |
        git clone --recurse-submodules -b "${{ env.GRPC_VERSION }}" --depth 1 --shallow-submodules https://github.com/grpc/grpc
        cd grpc
        mkdir -p ${{ env.GRPC_INSTALL_DIR }}
        mkdir -p cmake/build
        pushd cmake/build
        cmake -DgRPC_INSTALL=ON \
              -DgRPC_BUILD_TESTS=OFF \
              -DCMAKE_INSTALL_PREFIX=${{ env.GRPC_INSTALL_DIR }} \
              ../..
        make -j 4
        make install
        popd

    - name: Add GRPC to system path
      run: |
        echo ${{ env.GRPC_INSTALL_DIR }}/bin >> $GITHUB_PATH

    - name: Print protoc version
      run: |
        protoc --version

    - name: Cache ONNX
      id: cache-onnx
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.ONNX_INSTALL_DIR }}
        key: ${{ runner.os }}-${{ runner.arch }}-onnx-${{ env.ONNX_VERSION }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-onnx-${{ env.ONNX_VERSION }}
          ${{ runner.os }}-${{ runner.arch }}-onnx-

    - if: ${{ steps.cache-onnx.outputs.cache-hit != 'true' }}
      name: Download ONNX Release
      run: |
        mkdir -p ${{ env.ONNX_INSTALL_DIR }}
        if [[ $RUNNER_OS == "Linux" ]]; then
          curl -s -L "https://github.com/microsoft/onnxruntime/releases/download/v${{ env.ONNX_VERSION }}/onnxruntime-linux-x64-${{ env.ONNX_VERSION }}.tgz" | tar xvz --strip-components=1 -C ${{ env.ONNX_INSTALL_DIR }}
        elif [[ $RUNNER_OS == "macOS" ]]; then
          if [[ $RUNNER_ARCH == "arm64" ]]; then
            curl -s -L "https://github.com/microsoft/onnxruntime/releases/download/v${{ env.ONNX_VERSION }}/onnxruntime-osx-arm64-${{ env.ONNX_VERSION }}.tgz" | tar xvz --strip-components=1 -C ${{ env.ONNX_INSTALL_DIR }}
          else
            curl -s -L "https://github.com/microsoft/onnxruntime/releases/download/v${{ env.ONNX_VERSION }}/onnxruntime-osx-x86_64-${{ env.ONNX_VERSION }}.tgz" | tar xvz --strip-components=1 -C ${{ env.ONNX_INSTALL_DIR }}
          fi
        fi

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH=${{ env.GRPC_INSTALL_DIR }}
        -DONNXRuntime_ROOT_DIR=${{ env.ONNX_INSTALL_DIR }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
#      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }}

